server:
  port: 8081

app:
  account-service:
    host: localhost
    port: 8082
  expense-service:
    host: localhost
    port: 8083

api:
  common:
    version: 1.0.0
    title: Personal Expense API
    description: API to manage personal expenses, budgets, investment goals, etc.
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL
    externalDocDescription: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: DEVELOPER NAME
      url: www.developer-example.com
      email: contact@mail.com
  dashboard:
    get-account-summary:
      description: Returns a composite view of the specified account id
      notes: |
        # Normal response
        If the requested account id is found the method will return information regarding: 
        1. Base account information.
        1. Expenses.
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        
        ## Account id 113
        200 - Ok, but no expenses will be returned
        
        ## Non-numerical account id
        400 - A **Bad Request** error will be returned
        
        ## Account id 13
        404 - A **Not Found** error will be returned
        
        ## Negative account ids
        422 - An **Unprocessable Entity** error will be returned
  responseCodes:
    ok:
      description: OK
    badRequest:
      description: Bad Request, invalid format of the request. See response message for more information.
    notFound:
      description: Not found, the specified id does not exist
    unprocessableEntity:
      description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information.

springdoc:
  swagger-ui:
    path: /openapi/swagger-ui.html
  api-docs:
    path: /openapi/v3/api-docs
  packagesToScan: com.akhil.microservices.composite.dashboard
  pathsToMatch: /**

---
server:
  port: 8080

spring:
  config:
    activate:
      on-profile: docker

app:
  account-service:
    host: account
    port: 8080
  expense-service:
    host: expense
    port: 8080
