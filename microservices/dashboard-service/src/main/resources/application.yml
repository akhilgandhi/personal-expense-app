server:
  port: 8081
  error:
    include-message: always
  forward-headers-strategy: framework

app:
  eureka-server: localhost

api:
  common:
    version: 1.0.0
    title: Personal Expense API
    description: API to manage personal expenses, budgets, investment goals, etc.
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL
    externalDocDescription: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: DEVELOPER NAME
      url: www.developer-example.com
      email: contact@mail.com
  dashboard:
    get-account-summary:
      description: Returns a holistic view of the specified account
      notes: |
        # Normal response
        If the requested account id is found the method will return information regarding: 
        1. Base account information.
        1. Expenses.
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        
        ## Account id 113
        200 - Ok, but no expenses will be returned
        
        ## Non-numerical account id
        400 - A **Bad Request** error will be returned
        
        ## Account id 13
        404 - A **Not Found** error will be returned
        
        ## Negative account ids
        422 - An **Unprocessable Entity** error will be returned
    create-account-summary:
      description: Creates an account with expenses
      notes: |
        # Normal response 
        The composite account information posted to the API will be split up and stored as separate account info, 
        expenses entities.
        
        # Expected error responses
        1. If a account with the same accountId as specified in the posted information already exists, an 
           **422 - UnprocessableEntity** error with a "duplicate key" error message will be returned
    create-account:
      description: Creates an account
      notes: |
        # Normal response 
        The account information posted to the API will be stored as account info entity.

        # Expected error responses
        1. If a account with the same accountId as specified in the posted information already exists, an 
           **422 - UnprocessableEntity** error with a "duplicate key" error message will be returned
    delete-account-summary:
      description: Deletes an account including all the expenses
      notes: |
        # Normal response
        Entities for account information, expenses related to the specified accountId will be deleted.
        The implementation of the delete method is idempotent, that is, it can be called several times with the same response.
        This means that a delete request of a non-existing product will return **200 Ok**.
    create-expense-summary:
      description: Creates a expense for an account
      notes: |
        # Normal response 
        The expense information posted to the API will be stored as expense entity.
        # Expected error responses
        1. If a expense with the same expenseId as specified in the posted information already exists, an 
           **422 - UnprocessableEntity** error with a "duplicate key" error message will be returned.
    delete-expense-summary:
      description: Deletes an expense for an account
      notes: |
        # Normal response
        Entity for expense information related to the specified expenseId under accountId will be deleted.
        The implementation of the delete method is idempotent, that is, it can be called several times with the same response.
        This means that a delete request of a non-existing product will return **200 Ok**.
  responseCodes:
    ok:
      description: OK
    badRequest:
      description: Bad Request, invalid format of the request. See response message for more information.
    notFound:
      description: Not found, the specified id does not exist
    unprocessableEntity:
      description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information.

springdoc:
  swagger-ui:
    path: /openapi/swagger-ui.html
  api-docs:
    path: /openapi/v3/api-docs
  packagesToScan: com.akhil.microservices.composite.dashboard
  pathsToMatch: /**

spring:
  application:
    name: dashboard
  cloud:
    stream:
      defaultBinder: rabbit
      default:
        contentType: application/json
      bindings:
        accounts-out-0:
          destination: accounts
          producer:
            required-groups: auditGroup
        expenses-out-0:
          destination: expenses
          producer:
            required-groups: auditGroup
      kafka:
        binder:
          brokers: 127.0.0.1
          defaultBrokerPort: 9092
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/
      initialInstanceInfoReplicationIntervalSeconds: 5
      registryFetchIntervalSeconds: 5
    instance:
      leaseRenewalIntervalInSeconds: 5
      leaseExpirationDurationInSeconds: 5

logging:
  level:
    root: INFO
    com.akhil: DEBUG

management:
  endpoint:
    health:
      show-details: "ALWAYS"
  endpoints:
    web:
      exposure:
        include: "*"

---
server:
  port: 8080

spring:
  config:
    activate:
      on-profile: docker
  rabbitmq:
    host: rabbitmq
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka

app:
  eureka-server: eureka
---
spring:
  config:
    activate:
      on-profile: streaming_partitioned
  cloud:
    stream:
      bindings:
        accounts-out-0:
          producer:
            partition-key-expression: headers['partitionKey']
            partition-count: 2
        expenses-out-0:
          producer:
            partition-key-expression: headers['partitionKey']
            partition-count: 2
---
spring:
  config:
    activate:
      on-profile: kafka
  kafka:
    bootstrap-servers: kafka:9092
  cloud:
    stream:
      defaultBinder: kafka
      kafka:
        binder:
          replication-factor: 1