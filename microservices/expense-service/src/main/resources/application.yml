server:
  port: 8083

app:
  eureka-server: localhost
  eureka-username: u
  eureka-password: p

spring:
  application:
    name: expense
  data:
    mongodb:
      host: localhost
      port: 27017
      database: expense-db
  cloud:
    function:
      definition: messageProcessor
    stream:
      defaultBinder: rabbit
      default:
        contentType: application/json
      bindings:
        messageProcessor-in-0:
          destination: expenses
          group: expensesGroup
          consumer:
            maxAttempts: 3
            backOffInitialInterval: 500
            backOffMaxInterval: 1000
            backOffMultiplier: 2.0
      rabbit:
        bindings:
          messageProcessor-in-0:
            consumer:
              autoBindDlq: true
              republishToDlq: true
      kafka:
        binder:
          brokers: 127.0.0.1
          defaultBrokerPort: 9092
        bindings:
          messageProcessor-in-0:
            consumer:
              enableDlq: true
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/
      initialInstanceInfoReplicationIntervalSeconds: 5
      registryFetchIntervalSeconds: 5
    instance:
      leaseRenewalIntervalInSeconds: 5
      leaseExpirationDurationInSeconds: 5

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
    root: INFO
    com.akhil.microservices: INFO
    org:
      springframework:
        data:
          mongodb:
            core:
              ReactiveMongoTemplate: INFO

management:
  endpoint:
    health:
      show-details: "ALWAYS"
  endpoints:
    web:
      exposure:
        include: "*"
  zipkin:
    tracing:
      endpoint: http://zipkin:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0
---
server:
  port: 8080

spring:
  config:
    activate:
      on-profile: docker
  data:
    mongodb:
      host: mongodb
  rabbitmq:
    host: rabbitmq
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka

app:
  eureka-server: eureka
---
spring:
  config:
    activate:
      on-profile: streaming_partitioned
  cloud:
    stream:
      bindings:
        messageProcessor-in-0:
          consumer:
            partitioned: true
            instanceCount: 2
---
spring:
  config:
    activate:
      on-profile: streaming_instance_0
  cloud:
    stream:
      bindings:
        messageProcessor-in-0:
          consumer:
            instanceIndex: 0
---
spring:
  config:
    activate:
      on-profile: streaming_instance_1
  cloud:
    stream:
      bindings:
        messageProcessor-in-0:
          consumer:
            instanceIndex: 1
---
spring:
  config:
    activate:
      on-profile: kafka
  cloud:
    stream:
      defaultBinder: kafka
      kafka:
        binder:
          replication-factor: 1
  kafka:
    bootstrap-servers: kafka:9092
management:
  health:
    rabbit:
      enabled: false